INHERITANCE> INTRODUCTION
-> Inheritance allows a sub-class to inherit the properties of parent class.
-> The properties of one or multiple parent classes can be inherited.
-> The idea is to promote code-reusability.

INHERITANCE> IS-A RELATIONSHIP
Represents a hierarchy between two classes 'A' and "B" such that 'B' is an extension of "A"
-> "B" is derived from "A"
-> "B" is a subtype of "A"
-> Any object of "B" is also considered as an object of "A"

INHERITANCE OVERVIEW
-> An object of a subclass has all the implementations of the super class
-> Emphasizes on code-reusability
-> Allows independent extensions of the original software

INHERITANCE -> TYPES
Five types of Inheritance
-> Single Inheritance
-> Multiple Inheritance
-> Multilevel Inheritance
-> Hierarchical Inheritance
-> Hybrid Inheritance

INHERITANCE -> SINGLE INHERITANCE
-> Subclasses inherit the features of a single super class.

INHERITANCE -> MULTIPLE INHERITANCE
-> Allows a class to have more than one super class and to inherit features from all parent class.

INHERITANCE -> MULTILEVEL INHERITANCE
-> A subclass is inherited by another class
-> Any number of levels

INHERITANCE -> HIERARCHICAL INHERITANCE
-> A Super class is inherited by more than one subclass
-> Any number of Subclasses can be inherited from the super class

INHERITANCE -> HYBRID INHERITANCE
-> Combination of different types of inheritance
-> Multilevel + Multiple

INHERITANCE -> METHOD OVERRIDING
-> Subclass provides a specific implementation of a method that is already provided by one of its super classes
-> The implementation in the subclass overrides (replaces) the implementation in the superclass

Overridden method
-> Same name
-> Same parameters or signature
-> Same return type as the method in the Super class

INHERITANCE -> AMBIGUITY
-> The version of a method that is executed will be determined by the object that is used to invoke it. 

Some languages allow a programmer to:
-> Force overriding a method
-> Prevent a method from being overridden 

INHERITANCE -> IS-A VS HAS-A
-> Both are different types of hierarchy
-> Both are used for code reusability
-> Decide based on the actual relationship between two classes (or objects)

INHERITANCE -> SUMMARY
Key points discussed in this video:
-> Inheritance allows sub-classes to inherit the properties of parent classes.
-> Inheritance facilitates code-reusability and independent extensions of original software.
-> Single, multiple, multilevel, hierarchical, and hybrid are the five types of inheritance.
-> Some languages force and others prevent overriding a method.