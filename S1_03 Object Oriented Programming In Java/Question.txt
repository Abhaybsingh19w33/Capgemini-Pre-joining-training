Q - Which of the following does not contain steps of an algorithm?

Routine
Subroutine
Method
Function
Object

Ans - Object does not represent the steps of an algorithm, but has fields and methods to operate on the fields.

Q - Who wrote the book called 'Elements of Reusable Object-Oriented Software'?

Grady Booch
Dennis Ritchie
Gang Of Four
Ramuk Doniv

Ans -  The book Elements of Reusable Object-Oriented Software' was written by Gang of Four, in 1995 which explores the capabilities and pitfals of OOP. The book describes 23 common programming problems and patterns for solving them.

Q - In a UML class diagram, what is the symbol used for a protected member?

Plus (+)
Correct - Minus (-)
Hash (#)
Slash (/)
Percent (%)

Ans - Plus is used for public and Hash is used for
protected members. Slash and Percent are
not used in UML class diagrams.

Q - An object of a class is also known as

a member
an instance
a variable
a reference

Ans - The process of creating an object is known as instantiation, and hence the result of instantation is instance.

Q - Which of the following is not a major element in OOP?
Abstraction
Encapsulation
Typing
Hierarchy

Ans - The four major elements of OOP include
Abstraction, Encapsulation, Hierarchy, and
Modularity.

Q - In case of ______________ object continues to exist even after its creator ceases to exist.

Encapsulation
Typing
Persistence
Modularity

Ans - Persistence is the property of an object through
which its existence transcends time and hence
the object continues to exist even after its creator
ceases to exist.

Q - Abstraction ______________ on details that are significant to the viewer.

emphasises
suppresses
ignores
Ans - Abstraction presents an object's view relative to the perspective of who is using it

Q - Encapsulation is generally used for

Hiding the data members

Emphasizing on the details that are significant to the viewer

Presenting an object's view relative to the perspective of who is using it

Ans - Encapsulation is the mechanism for restricting access to Some components of an object, and hence hide the data members which are accessed via public methods.

Q - In a UML class diagram, encapsulated members are prefÄ«xed with the symbol.

Plus
Minus
Hash

Ans - Encapsulated members are denoted as private and hence we use the minus symbol to the same in a UML class diagram.

Q - Which of the following does not describe aggregation?
Select the correct option and olick Submit.

Whole-part relationship
Object "A" belongs to object "B"
Has-A
Is-A

Ans - Is-A relationship describes inheritance and
not aggregation.

Q - In aggregation, the constituent continues to exist even after a composite is destroyed. Is this statement correct?


Yes
No

Ans - For example, A universisty has departments and a
department has proteSsors. It the university closes,
the departments will no longer exIst. But the
professors in those departments will continue to exist.

Q - Which of the following is not allowed in Java?

Single inheritance
Multiple inheritance
Multilevel inheritance
Hierarchical inheritance

Ans - Java does not allow multiple inheritance between classes. However, be aware that it is allowed to have intertaces.

Q - Which of the following is not a type of hierarchy?

Inheritance
Aggregation
Composition
Overriding

Ans - Inheritance, Aggregation and Composition defines a relationship between various classes in an application. Overniding is only to re-write an inherited method to provide a different behavior in the subclass.

Q - Which of the following is not allowed in Java?

Method overriding
Operator overloading
Method overloading
Constructor overloading

Ans- Overloading of operators are not allowed in Java, unlike C++ or C#.

Q - Which of the following is also known as inclusion polymorphism?

Subtyping
Ad-hoc
Parametric
Operator overloading

Ans - Subtyping is also known as inclusion Polymorphism and involves a super-subtype relationship.

Q - As a best practice, hoW would you like to arrange the members?

Constructors, Fields, Getters/setters
Constructors, Getters/setters, Fields
Getters/setters, Fields, Constructors
Fields, Constructors, Getters/setters

Ans - AS a best practice, arrange the members in this order.
Fields, Constructors, Getters/setters, Overridden methods, Other methods

Q - Which of the following is incorrect regarding a source code?

Only one public class per source file
Source filename must match the public class name
A source code Is saved in a file with the extenslon of .java
A source code can not contain more than one Java class definition

Ans - A source code can contain any number of class definition, but only one of them can be marked as public. Source filename must match the public class name.

Q - What does the above statement return?

A named object
Correct - An anonymous object 
A nested object
A proxy object

new Object(){
    public void sayHello(){
        System.out printin("Hello.");
    }
};

Ans- The curly braces after the "new Object()" is equivalent to a nameless class that extends Object. Inside the braces, we can define new methods or Override the inherited methods

Q - To provide encapsulation, hide the data members using.

private access
protected access
package level access
minus symbol

Ans - To protect these state variables, we use the concept of encapsulaton. Hide the data members using 'private. Expose the access to them using public methods

Q - A member can be shared with all instances of the class by declaring it as

abstract
final
private
static

Ans - static members belong to the class and only one
Copy exists in the JVM.

Q - Which of the following is not true if the method of a class marked as 'final?

Makes the class as non-concrete, and forces the class
as final

Method must have body

When inherited, subclass can not override such method

Makes this function to be used as-is by objects of subclasses

Ans - A class is made as non-concrete when a method is marked as abstract, and forces the class as abstract.

Q - A parameter can also be marked as ______________ to indicate that the value of the parameter supplied may not be changed within the method.

single
constant
const
final

Ans - A parameter can also be marked as 'final' too indicate that the value of the parameter supplied may not be changed within the method.

Q - Which of the following is not overloading?

Correct - int sayHello(String name);
void sayHello(String user);
void sayHello(String user, String city);
Ovoid sayHello(Stringoll users);

Ans - While overloading the methods, only the signature must differ. By return type alone, Overloading can not be established.

Q - The 'this' keyword can not be used inside:

constructors
non-static methods
static methods

Ans - Static methods do not need object creation. The reference this refers to the invoking object, with out which this can not be used.

Q - The this' keyword can also be used to invoke a constructor from another one. True or false?

Correct - True
False

Let us understand this with the help of an example

Employee(int id) {
    this.id = id;
    this('ADMIN", 20000.0);
}

Employee(String dept, double salary) {
    this.dept= dept,
    this.salary salary
}

Q - The ______________ stage is where the deletion of objects take place.

sweeping
marking
Compacting 

Ans - The traditional way is to let the allocator methods use complex data structure to search the memory for the required free space

Q - In a generational GC, new objects are created in _

Young generation
Old generation
Permanent generation
Survivor spaces

Ans - Young generations contain new and young Objects. It is divided into eden, and two Survivor spaces.

Which generation contains objects that have reached the minor GC age threshold?
Select the correct option and click Submit.
Eden
Survivor spaces
Old generation
Permanent generation

Ans - Old generation contains objects that have reached the minor GC age threshold. Major GC is performed on this generation, when the threshold is reached here.

Q - Which of the following is an incorrect statement regarding the constructors?

Can not be explicitly invoked
Correct - Can not be parameterised
Does not have a return type, not even void
Sets the initial state of an object during the object creation

Ans - By adding parameters to the constructor, overloading of constructors can be done.

Q - If there is no initialization required, do not add a default constructor.lf there is no initialization required, do not add a defauit constructor

True
Correct -  False
Ans - It is a good practice to add a default, no argument constructor, even if you do not have anything to do in it.

Q - What is a method signature?

return type + name

return type + name + arguments

name + arguments

return type + arguments

Ans - Signature of a method is the combination of name and arguments (if any).

Q -  Choose the correct statement regarding constructor

Correct - Constructors are automatically called during object creation

Constructors are automatically called before object creation

Constructors can be called using an object reference

An object can be created using more than one constructor

Ans -  Creating an object involves using the constructor.
For example,
Employee emp = new Employee();
The brackets here determine which constructor to call.

Q - Choose the incorrect statement regarding static variables.

Static variables belong to the class

They don't belong to any object explicitly

Correct - Static variables belong to an object

All objects share the same variable

Ans - Static variables do not belong to any object. In fact, a static variable occupies memory as soon as the class in which it is declared is loaded.

Q - Which of the following is correct regarding a static method?

Static methods are accessed using the reference of an object

Static methods can access the state of an object

Static methods can not access other static methods in the same class

Correct - Declare a method as static if the method does not use any of the instance variables in that class

Ans - Static methods are accessed using the name or the class. Staic methods can not aCcess instance variables. Static methods can access other static members of the same class.

Q - In Java, Aggregation is created by declaring a reference of ______________ type in ______________

Correct - constituent, composite
composite, composite
constituent, constituent
composite, constituent

Ans - In Aggregation a Composite HAS-A constituent and a Constituent is a PART-OF a composite.

Q - if accessing a method of a constituent using a composite is done frequently, we can have a decorator method in the composite to avoid the statement chaining. These are also known as ______________

members
accessors
Correct - Delegates
Aggregation

Ans - Using a delegate method, a reference of a composite can invoke the corresponding method of the constituent.

Q - The keyword ______________ is used to achieve inheritance.

inherit
implement
extend
Correct - extends

Ans - Use the keyword 'extends' to achieve inheritance.
For example : class Employee extends Person { }

Q - Choose the incorrect statement regarding inheritance.

Memory required by an object of subclass is equal to the total memory required by members of the same class and members of its super class hierarchy.

The keyword 'super' is used to refer to any super class member, especially when there is a name conflict.

Correct - If you invoke a method f1() of super class, which has been overridden in the subclass, using reference of a subclass, Java prefers to invoke the method from the super class.

If you invoke a method f1() of super class, which has been overridden in the subclass, using reference of a subclass, Java prefers to invoke the method from the subclass.

Ans - A reference always invokes the overridden method in the object.

Q - A method from the super class can be re-writen in the subclass. What is this known as?

Overloading
Correct - Overriding
Modularity
Encapsulation

Ans - If a method from the super class is re-written in the subclasS, It is called as Overriding.

Q - Multiple inheritance is supported in many languages, but not in ______________

C++
Eiffel
Perl
Correct - Java
Ans - Java does not support multiple inheritance for Classes.

Q - The diamond problem is also known as ______________
the gem problem
the rhombus problem
Correct - the diamond of death problem
the death of diamond problem

Ans - This is a common problem in languages that Support multiple inheritance.

Q - Choose the incorrect statement.

Private data members occupy memory, but cannot be accessed

Using inheritance, a class gets all the members of a Super class

Private methods are not accessible, and can be redefined with a different return type. Hence they may be considered as not inherited

Correct - Multilevel inheritance is not allowed in Java

Ans - Java does not allow multiple inheitance. However, a subclass can also be used as a super class and then it is called multi-level inheritance.

Q - Is the following statement true or false?

If the super class does not have a default constructor, and in the subclass constructor there is no call to super class overloaded constructor, compilation fails.

Select the corect option and click Submit.
Correct - True
False

Ans - Let us understand this with the help of an example.
public class A {
    public A(int n) {}
}

public class B extends A{
    public B() {}
}
Compilation of class B fails.

Q - Using ______________ you can invoke an inherited member with protected or stronger access.

Select the corect option and click Submit.

base
Correct - super
this
super()

Ans - Using "super" you can invoke a super class member (protected or stronger access).

Q - Overriding ______________ the super class method.

exposes
deletes
Correct - hides
invalidates

Ans - If such a method is called using a reference of the subclass object, super class method will not be called.

Q - To restrict a method from being overridden, use the ______________ modifier on the method.

static
Correct - final
abstract
const

Ans - The modifier final ona method indicates that subclasses can not override them.

Q - Choose the incorrect statement.

A non-static method in the superclass cannot be
Overridden in the subclass as a static method.

Correct - If a static method in the super class is overridden in a subclass, it has to be marked as static even in the subclass.

Overriding does not apply to private methods, as the
subclass does not see the same method in the super class.

A protected method in the super class can be overridden with package level access modifier in the subclass.

Ans - While overiding, access can be widened but can not be narrowed.

Q - Which keyword is used for calling super class constructor from a subclass constructor?

base
this
init
Correct - super

Ans - The 'super keyword is used as method name to invoke the super class constructor.

Q - If the super class constructor declares a checked exception in the prototype, then the subclass constructor should also declare the same exception in its prototype.

Correct - True
False

Ans - Alternatively, it can call the super class Constructor in a try-catch block.

Q - Which keyword is used for restricting inheitance?

super
static
const
Correct - final

Ans - Using the 'final' keyword on a class makes the class non-extendable. It does not mean that references to objects of a final class are final. And it does not mean that the members of a final class are final

Q - Which of the following is not a final class?

java.lang.System
java.lang.Class
Correct - java.lang.Object
java.lang. String

Ans - Every class inherits from java.lang.Object.

Q - Which of the following is incorrect regarding method overriding?

Signature must match
Return type should not change
Correct - Access can be made narrower but not wider
Final methods cannot be overridden

Ans - Access can be made wider but not narrower

Q - Polymorphism helps in

tight coupling
Correct - loose coupling
overriding
inheritance

Ans - Use references of an interface (or abstract class) and objects of implementing (or sub) classes.

Q - Identify the incorrect statement.

When a class extends another, it inherits all members
from super class, including the abstract methods

An abstract class cannot be instantiated

Correct - An abstract class must have at least one abstract method

An abstract class may contain non-abstract (concrete) methods too

Ans - A class can be marked as abstract even if there are no abstract method. The only purpose achieved is that the objects of that class can not be created.

Q - An abstract method cannot be marked as

public
static
Correct - final
private

Ans - Final members cannot be overridden, while abstract members need to be overridden.

Q - If the name of the class is co.vinod.dao.ProductDao, then the location of the ProductDao.class relative to the CLASSPATH is ______________

src/co/vinod/dao
bin/co/vinod/dao
bin/co.vinod.dao
Correct - co/vinod/dao

Ans - The package names correspond to a folder structure in the file system. If the package name is a.b.c, then we must create a folder structure a/b/c and then place the class files of all thte package members.

Q - If the referenced class is from a different package, compiler looks for it in the same package or the package ______________

java
Correct - java.lang
java.util
java.lang.default

Ans - All classes and interfaces from java.lang package are automatically imported to every class.

