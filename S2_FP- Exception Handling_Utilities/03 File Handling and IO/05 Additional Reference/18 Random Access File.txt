Table of Contents
1 RandomAccessFile class
1.1 Random Acess Files
1.2 To create RandomAccessFile with different opening modes
1.3 To access a RandomAccessFile
1.4 To read a RandomAccessFile
1.5 To write into RandomAccessFile
1.6 To replace contents in RandomAccessFile
1.7 Reading Files Randomly using FileChannel class
1.8 Writing Files Randomly using FileChannel class
1.9 To close a RandomAccessFile
1.10 Summary

1.1 Random Access File
Random access refers to the ability to access data at random. The RandomAccessFile cdass in the Java IO API allows you acces a file and read from it or write to it at random Reading and writing using the file input and output streams are a saquential process. Using a random access file, we can read or write at any position within the file.

1.2 To create RandomAccessFile with different opening modes

public class RandomAccessFile extends Cbject implements DataOutput, DataInput, Closeable

Instances of this class support both reading and writing to a random access file. A random access file behaves like a large array of bytes stored in the file system. There is a kind of cursor, or index into the implied array, called the file pointer which facilitate for conducting the operations on random access file.

To work with the RandomAccessFile class you must first instantiate it. Here is how that locks:

RandomAccessFile file = new RandomAccessFile ("d:\ \javafiles\file.txt", "rw");

The above statement creates a random access file stream to read from, and optionally to write to, a file with the specified name.

In the above example the first input paramater is the filename ("d:\\javafiles\\file.txt"). The second input parameter to the constructor : "rw". This is the mode you want to open file in. "rw" means read/write mode.

A random access file can be created in four different access modes. The access mode value is a string.
They are listed as follows:

"r" - The file is openad in a read-only mode.
"rw" -  The file is opened in a read-write mode. The file is created if it does not exist.
"rws" - The file is openad in a read-write mode. Any modifications to the file's content are written to the storage device immediately.
"rwd" - The file is opened in a read-write mode. Any modifications to the files content are written to the storage device immediately.

Constructors

RandomAccessFile (File file, String mode) - Creates a random access file stream to read from, and optionally to write to, the file specified by the File argument

RandomAccessFile( String name, String mode) - Creates a random access file stream to read from, and optionally to write to, a file with the specified name.

1.3 To access a RandomAccessFile

To access at a specific location in a RandomAccessFile, you must first position the file pointer so that at the location, read or write operations can be conducted. This is done using the seek() method. The current position of the file pointer can be obtained by calling the getFilePointer() method.


void seek(long pos) - Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.

long getFilePointer () - Returns the current offset in this file.

For Example:

public class Main {
    public static void main(String[] args) {
        try (RandomAccessFile file = new RandomAccessFile ("d: \\Javafiles\\file.txt", "rw");
            ){
                file.seek (200);
                long pointer = file.getFilePointer();
                System.out.println(pointer);

                file.close ();
            }
            catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            catch (IOException el) {
                e.printStackTrace();
            }
    }
}

1.4 To write into RandomAccessFile

Writing to a RandomAccessFile can be done using one it its many write) methods.

Few write() methods are given below:

void Write (byte[] b)
-> Writes b.length bytes from the specifed byte array to this file, starting at the current file pointer.

void write(byte[] b, int off, int len)
-> Writes len bytes from the specified byte array starting at offset off to this file

void writeBytes(String s)
-> Writes the string to the file as a saquence of bytes 

For Example
public class Main {
    public static void main (String[] args) {
        try (RandomAccessFile file = new RandomAccessFile ("d:\\Javafiles\\file1.txt","rw");) {
            file.writeByte ("Hello World Java is a programming language"):
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }
}

1.5 To read a RandomAccessFile
Reading from a RandomAccessFile is done using one of its many read() methods.

Few read() methods are given below:

int read() - Reads a byte of data from this file.

int read(byte[] b) - Reads up to b.length bytes of data from this file into an array of byte.

int read(byte[] b, int off, int len) - Reads up to len bytes of data from this file into an array of bytes from offset off

public class Main2 {
    public static void main(String[] args) {
        try (RandomAccessFile file = new RandomAccessFile ("d:\\Javafiles\\file1.txt","rw");) {
            file.seek(0);

            // long pointer = file.getFilePointer();
            // System.out.println (pointer);

            System.out.println ((char) file.read());
            file.seeek(file.length() - 20); // random access
            System.out.println (file.readLine());
        }
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }   
}

1.6 To replace contents in RandomAccessFile

public class Main4 {
    public static void main(String[] args) {
        try (RandomAccessFile ref = new RandomAccessFile ("d:\\2019\\file1.txt","rw");) {

            // random positioning of the filepointer
            ref.seek(ref.length() - 20);

            // replacing the file contents
            String str = "get it cashback on purchases";
            ref.write(str.getBytes());
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }   
}

1.7 Reading Files Randomly using FileChannel

You can randomly read file FileChannel by setting the position to a location and reading content from that location or specific number of bytes.

public class Main3 {
    public static void main(String[] args) {
        path filePath = paths.get("d:\\2019\\file1.txt");
        ByteBuffer bb =  ByteBuffer.allocate(200);

        try (FileChannel) fc = (FileChannel.open(filePath, StandardOpenOption.READ))) {
            fc.position(10);
            fc.read(bb);
            bb.flip();

            String cont = Charset.forName("UTF-8").decode(bb).toString();
            System.out.println(cont);
        }
    }
}

1.8 Writing Files Randomly using FileChannel

You can randomly write to file using FileChannel by setting the position toa desired location and writing the new content fromm the location.

public class Main3 {
    public static void main(String[] args) {
        Path filePath = Paths.get("d:\\2019\\file1.txt");

        String offer = "upto 99% off on select limited items";

        ByteBuffer bb =  ByteBuffer.wrap(offer.getBytes());

        try (FileChannel) fc = (FileChannel.open(filePath, StandardOpenOption.READ,
        StandardOpenOption.WRITE))) {
            fc.position(fc.size() - 14);
            bb.rewind();
            fc.write(bb);            
        }
    }
}

1.9 To close RandomAccessFile

The RandomAccessFile has a close() method which must bere called when you are done using the RandomAccessFile instance

1.10 Summary

The RandomAccessFile class in the Java.IO API allows access, read and write of files.